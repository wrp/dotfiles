# Git related interactive functions

g() {
	local rv=0 root remote err dir src branch

	if test -n "$DOCKER" && test -z "$FORCE_G"; then
		echo "Do not run git in a docker image.  Set FORCE_G to force" >&2
		return 1
	fi

	src=$(awk '/^top_srcdir/{print $3}' Makefile 2> /dev/null)
	if test -n "$src" && test "$(pwd)" != "$(cd "$src"; pwd)"; then
		(
			echo "Found top_srcdir in Makefile.  Re-running in $src" >&2
			cd "$src"
			g "$@"
		)
		return 0;
	fi

	case $1 in
	(.)
		remote="$(git rev-parse --symbolic-full-name @{upstream} 2> /dev/null)"
		printf 'cwd:%s branch:%s%s%s\n' \
			"$(pwd)" \
			"$(tput setaf 3; git rev-parse --abbrev-ref HEAD)" \
			"$(tput setaf 2)" \
			"${remote:+ (${remote#refs/remotes/})}"
		return
	;;
	# (l1a) if test -t 1; then tig; else git "$@"; fi;; # Train myself to use tig
	(base)
		git worktree list --porcelain | awk '{print $2; exit}'
		return
	;;
	(r)
		shift
		find . -type d -name .git -exec sh -c '
			cd ${0%.git};
			command git "$@" |
			perl -pe "s@^@sprintf(\"%30s: \", \"${0%/.git}\")@e"' {} "$@" \;
		return
	;;
	(root)
		root=$(git rev-parse --show-toplevel) \
		&& root=$(cd "$root" && pwd 2> /dev/null)/ \
		&& printf '%s\n' "${root}"
		return
	;;
	(co)
		if test "$2" -gt 0 2> /dev/null; then
			branch="${GIT_DEFAULT_BRANCH_PREFIX}$2"
			shift; shift;
			set -- co "$branch" "$@"
		fi
		# Check if the current directory is a worktree and reject
		if test "$#" -eq 2 && git worktree list --porcelain |
			awk 'NR > 1 && /^worktree/ && substr(pwd, 1, length($2)) == $2 {m=1}END{exit !m}' pwd=$(pwd)
		then
			dir=$(git worktree list --porcelain | awk '{print $2; exit}')
			if ! test -d "$dir"; then
				echo "You are in a worktree.  Cannot find base dir.  Aborting!" >&2
				return 1
			fi
			local msg="**** Changing directory to base in $dir ****"
			local len=$(printf "%s" "$msg" | wc -c)
			local banner=$(perl -E 'print"*" x '"$len")
			printf "%s\n" "$banner" "$msg" "$banner"
			cd "$dir"
			g "$@"
			return;
		fi
	;;
	esac

	{ err=$( git "$@" 2>&1 >&3 ); } 3>&1
	rv=$?

	if dir="$( printf '%s\n' "$err" | tr -d "'" |
		awk '/is already checked out at/{ print $NF; f=1 }
		END {exit !f}'
	)"; then
		local msg="**** Changing directory to worktree in $dir ****"
		local len=$(printf "%s" "$msg" | wc -c)
		local banner=$(perl -E 'print"*" x '"$len")
		printf "%s\n" "$banner" "$msg" "$banner"
		cd "$dir"
		rv=$?
	elif test -n "$err"; then
		printf '%s\n' "$err" >&2
	fi
	return $rv
}
ga() {
	# When running on both docker and outside, the repos seem to get corrupt
	# in such a way that `git status` cleans it up.  (That is, git diff-index
	# will fail until `git status` is run in that environment.)  So run
	# git status to "uncorrupt" the repo.  Terrible hack.
	git status > /dev/null

	local msg force against=HEAD preamble
	if test "$1" = "-f"; then
		force=1
		shift
	fi
	if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
		# Initial commit: diff against an empty tree object
		against=$(git hash-object -t tree /dev/null)
	fi
	if test -z "$force" && ! git diff-index --quiet $against; then
		echo 'Repo is dirty.  -f to force (will also skip pre-commit check)' >&2
		return 1
	fi

	if test -z "$force"; then
		# If we abort, or git commit fails, we want to return to a clean state.
		# If commit succeeds, doing reset should be a no-op.  But, if user
		# asked to force, do not attempt to clean up.
		trap 'git reset' RETURN
	fi
	git add "$@";
	preamble=$(perl -E 'say substr "@ARGV", 0, 56' "$@")
	msg=$(git diff --name-only --cached \
		| perl -0000 -nE 'if(length > 56) {s@^@Add files: '"$preamble"'\n\n@} else {
			s/\n/ /g; s/^/Add / }; say'
	)
	if test -z "$msg"; then
		echo "Unable to generate commit message!" >&2
		return 1;
	fi
	git commit ${force:+--no-verify} -m "$msg";
}
gdm() { # Diff with the merge-base of the base branch
	local branch=${1-HEAD}
	if git rev-parse --verify -q "$branch" > /dev/null; then
		shift
	else
		branch=HEAD
	fi
	local base
	if ! base=$(git config diff.base-branch); then
		echo "Don't know which branch to diff against"
		echo 'Please specify with "git config diff.base-branch $branch"'
		return 1
	fi >&2
	git diff "$@" "$(git merge-base "$branch" "$base")" "$branch"
}
gno() { gdm --name-only "$@"; }
git_unpack() {
	local dir sha
	test $# = 0 && { echo 'Expected tarball arg' >&2; return 1; }
	for x; do
		local zip
		test "${x%.tar.gz}" = "$x" || zip=z
		dir="$(set -x; tar -${zip}tf "$x" | awk '{print $1}' FS=/ | sort -u)"
		if ! test "$(echo "$dir" | wc -l | tr -d ' ')" = 1; then
			echo "$x has more than 1 dir or contains newlines:"
			echo "$dir"
			return 1
		fi >&2

		test -e "$dir" && { echo $dir exists; return 1; }
		sha=$(md5sum "$x" | cut -d\  -f 1)
		tar -${zip}xf "$x" \
		&& cd "$dir" \
		&& git init \
		&& git add . \
		&& git commit -n -m "Initial unpack: $sha $(basename $x)"
	done
}
git() {
	case "$1" in
	clone)
		local origin url
		shift    # discard 'clone'
		url=$1
		shift

		# Parse the url to specify a name for origin
		case $url in
		http*)
			# By default, remap name to use ssh
			if test -z "$HTTP_OK"; then
				echo 'Remapping http target to git@ to use ssh.  To force http, set HTTP_OK' >&2
				url=$(printf '%s\n' "$url" | sed -e 's|.*://|git@|' -e 's@/@:@')
				shift
			fi
		;;
		*github*) origin=github;;
		*bitbucket.devops.wepay-inc.*) origin=wepay;;
		esac
		test -n "$origin" && echo "Setting origin=$origin" >&2
		set -- clone ${origin:+--origin="$origin"} "$url" "$@";
	;;
	esac
	command git "$@";
}
gr() { # Git recursive
	local delim=': '
	test "$1" = grep && delim='/'
	find . -name .git -type d -execdir sh -c 'p=$(pwd); command git "$@" |
		sed -e "s@^@.${p#'"$(pwd)"'}'"${delim}"'@"' _ "$@" \; | ${PAGER-more}
}
