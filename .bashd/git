# Git related interactive functions


_select_git_branch() {
	# Present a menu when invoked with no arguments,
	# or select branch by number.
	local branches branch

	if test -n "$1" && git rev-parse --verify "$1" > /dev/null 2>&1; then
		branch=$1
	else
		branches=($(command git show-ref --heads | sed -e 's@.*refs/heads/@@'))
		if test $# = 0; then
			select branch in "${branches[@]}"; do break; done
		elif test "$1" -gt 0 2> /dev/null; then
			branch=${branches[$(($1-1))]}
		fi
	fi
	printf '%s' "$branch"
	test -n "$branch"
}

git_checkout() {
	if test $# = 0 || test "$1" -gt 0 2> /dev/null; then
		set -- "$(_select_git_branch $1)"
	fi
	command git checkout "$@"
}


git_dot() {
	local remote
	remote="$(command git rev-parse --symbolic-full-name @{upstream} 2> /dev/null)"
	printf '%s: %s%s\n' \
		"$(tput setaf 4; pwd)" \
		"$(tput setaf 3; command git rev-parse --abbrev-ref HEAD)" \
		"$(tput setaf 2)${remote:+ (${remote#refs/remotes/})}"
}
git_recurse() {
	# run git recursively and prepend path to output
	local delim=': '
	if test "$1" = grep; then delim=''; fi
	find . -type d -name .git -exec sh -c '
		command git -C "${0%.git}" "$@" |
		perl -pe "print \"${0%.git}'"$delim"'\""' {} "$@" \; \
	| ${GIT_PAGER-${PAGER-more}}
}
git_root() {
	local root
	root=$(command git rev-parse --absolute-git-dir)/.. \
	&& root=$(cd "$root" && pwd 2> /dev/null)/ \
	&& printf '%s\n' "${root}"
}
g() { git "$@"; }
git() {
	# Abort if not in a git dir.  TODO: honor -C args
	case $1 in
	clone|init) ;;
	*) if ! command git rev-parse --git-dir > /dev/null; then return 1; fi
	esac
	test $# = 0 && { git_dot; g s; g b; return; }
	case $1 in
	(.        ) git_dot;;
	(base     ) command git worktree list --porcelain | awk '{print $2; exit}' ;;
	(clone    ) git_clone "$@" ;;
	(co       ) shift; git_checkout "$@";;
	(dm       ) shift; gdm "$@";;   # diff with main
	(dmno     ) shift; gno "$@";;
	(no       ) shift; gno "$@";;   # name-only (diffs with main)
	(r        ) shift; git_recurse "$@";;
	(root     ) git_root;;
	(*        ) command git "$@" ;;
	esac

}
ga() {
	# When running on both docker and outside, the repos seem to get corrupt
	# in such a way that `git status` cleans it up.  (That is, git diff-index
	# will fail until `git status` is run in that environment.)  So run
	# git status to "uncorrupt" the repo.  Terrible hack.
	git status > /dev/null

	local msg force against=HEAD preamble
	if test "$1" = "-f"; then
		force=1
		shift
	fi
	if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
		# Initial commit: diff against an empty tree object
		against=$(git hash-object -t tree /dev/null)
	fi
	if test -z "$force" && ! git diff-index --quiet $against; then
		echo 'Repo is dirty.  -f to force (will also skip pre-commit check)' >&2
		return 1
	fi

	if test -z "$force"; then
		# If we abort, or git commit fails, we want to return to a clean state.
		# If commit succeeds, doing reset should be a no-op.  But, if user
		# asked to force, do not attempt to clean up.
		trap 'git reset' RETURN
	fi
	git add "$@";
	preamble=$(perl -E 'say substr join(", ", @ARGV), 0, 56' "${@##*/}")
	msg=$(git diff --name-only --cached \
		| perl -0000 -nE 'if (tr/\n// > 1) {s@^@Add '"$preamble"'\n\n@} else {
			s/\n/ /g; s/^/Add / }; say'
	)
	if test -z "$msg"; then
		echo "Unable to generate commit message!" >&2
		return 1;
	fi
	git commit ${force:+--no-verify} -m "$msg";
}
gdm() { # Diff with the merge-base of the base branch
	local branch=HEAD
	if test -n "$1" && tmp=$(_select_git_branch "$1"); then
		branch=$tmp
		shift
	fi

	local base=$(git config diff.base-branch)
	if test -n "$1" && tmp=$(_select_git_branch "$1"); then
		base=$tmp
		shift
	fi
	if test -z "$base" || ! git rev-parse --verify "$base" > /dev/null; then
		echo "Don't know which branch to diff against"
		echo 'Please specify with "git config diff.base-branch $branch"'
		return 1
	fi >&2
	git diff "$@" "$(git merge-base "$branch" "$base")" "$branch"
}
gdmno() { gno "$@"; }
gno() { gdm "$@" --name-only; }
git_unpack() {
	local dir sha
	test $# = 0 && { echo 'Expected tarball arg' >&2; return 1; }
	for x; do
		local zip
		test "${x%.tar.gz}" = "$x" || zip=z
		dir="$(set -x; tar -${zip}tf "$x" | awk '{print $1}' FS=/ | sort -u)"
		if ! test "$(echo "$dir" | wc -l | tr -d ' ')" = 1; then
			echo "$x has more than 1 dir or contains newlines:"
			echo "$dir"
			return 1
		fi >&2

		test -e "$dir" && { echo $dir exists; return 1; }
		sha=$(md5sum "$x" | cut -d\  -f 1)
		tar -${zip}xf "$x" \
		&& cd "$dir" \
		&& git init \
		&& git add . \
		&& git commit -n -m "Initial unpack: $sha $(basename $x)"
	done
}
git_clone() {
	local origin url
	shift    # discard 'clone'
	url=$1
	shift

	# Parse the url to specify a name for origin
	case $url in
	http*)
		# By default, remap name to use ssh
		if test -z "$HTTP_OK"; then
			echo 'Remapping http target to git@ to use ssh.  To force http, set HTTP_OK' >&2
			url=$(printf '%s\n' "$url" | sed -e 's|.*://|git@|' -e 's@/@:@')
			shift
		fi
	;;
	*github*) origin=github;;
	esac
	test -n "$origin" && echo "Setting origin=$origin" >&2
	set -- clone ${origin:+--origin="$origin"} "$url" "$@";
	command git "$@"
}
gr() { # Git recursive
	echo 'Stop using gr.  Use "g r" instead and fix it as needed' >&2
	return 1
}
