# Git related interactive functions


g() { git "$@"; }
git() {
	local arg orig prev version verbose=$V tmp
	version=$(command git --version) || return
	if test -n "$EXPECTED_GIT_VERSION" &&
		test "$version" != "$EXPECTED_GIT_VERSION"
	then
		(die Unexpected git version: $version)
		return 1
	fi

	test $# = 0 && { set -- .; }

	# Do aliasing on arguments
	for arg; do
		shift
		orig=$arg

		case $arg in
		(mb    ) arg=--merge-base;;
		(no    ) arg=--name-only;;
		(bb    ) arg=$(git-base-branch) || return 1;;
		([0-9]*) # replace numeric args with branch name
			if test "$prev" != -n && test "$arg" -ge 0 2> /dev/null; then
				arg=$(command git select-branch "$arg") || return 1
			fi
		esac
		test "$arg" != "$orig" && verbose=1
		set -- "$@" "$arg"
		prev=$orig
	done

	test -t -1 && tput sgr0

	case $1 in
	(cd    )
		shift
		tmp=$(command git show-worktree "$@") \
		&& tmp=${tmp}/${PWD#$(git rev-parse --show-toplevel)/} \
		&& cd "$tmp" \
		&& echo "Changed directory to $tmp"  \
		;
		return;;
	(clone ) shift; set -- clone-wrapper "$@";;
	(.     ) set -- info;;
	esac
	test "${verbose:-0}" -eq 0 2> /dev/null || echo "git $*"

	command git "$@"
}
for cmd in ga gdm; do
eval "$cmd() { echo 'OBSOLETE: Use g ${cmd#g} instead' >&2; return 1; }"
done
