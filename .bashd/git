# Git related interactive functions


g() { git "$@"; }
git() {
	local v
	v=$(command git --version) || return
	if test -n "$EXPECTED_GIT_VERSION" &&
		test "$v" != "$EXPECTED_GIT_VERSION"
	then
		warn Unexpected git version: $v
		which git
		return 1
	fi

	test $# = 0 && { status=1 branch=1 command git info; return; }

	# Do aliasing on arguments
	local i old_arg prev new_arg count=$#
	for old_arg; do
		# replace numeric args with branch name
		if test "$prev" != -n && test "$old_arg" -ge 0 2> /dev/null; then
			new_arg=$(command git select-branch "$old_arg")
		fi
		case $old_arg in
		(mb    ) new_arg=--merge-base;;
		(no    ) new_arg=--name-only;;
		(bb    ) new_arg=$(git-base-branch) || return 1;;
		esac

		if test -n "$new_arg"; then
			echo "$old_arg --> $new_arg" >&2
			old_arg=$new_arg
		fi

		set -- "$@" "$old_arg"
		prev=$old_arg
	done
	for ((i=0; i < count; i+=1)); do shift; done

	case $1 in
	(clone ) v=$1; shift; set -- "$v"-wrapper "$@";;
	(.     ) set -- info;;
	esac
	command git "$@"

}
ga() {
	echo 'Use g a instead of ga' >&2
	return 1
}
