# Git related interactive functions

# TODO: Stop using the monstrosity of completions that is
# https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
# and get something functional that will do the branch number-to-name conversions

g() { git "$@"; }
git() {
	local arg cwd orig prev version verbose=$V top

	version=$(command git --version) || return
	if test -n "$EXPECTED_GIT_VERSION" &&
		test "$version" != "$EXPECTED_GIT_VERSION"
	then
		(die Unexpected git version: $version)
		return 1
	fi

	test $# = 0 && { set -- .; }

	# Do aliasing on arguments
	for arg; do
		shift
		orig=$arg

		case $arg in
		(main  ) arg=$(git-base-branch) || return 1;;
		(mb    ) arg=--merge-base;;
		(no    ) arg=--name-only;;
		(bb    ) arg=$(git-base-branch) || return 1;;
		([0-9]*) # replace numeric args with branch name
			if test "$prev" != -n &&
				test "$arg" -ge 0 2> /dev/null &&
				! arg=$(command git select-branch "$arg")
			then
				return 1
			fi
		esac
		test "$arg" != "$orig" && verbose=1
		set -- "$@" "$arg"
		prev=$orig
	done

	printf '%s' "$RESET"

	case $1 in
	(cd    )
		shift
		top=$(command git show-worktree "$@") \
		&& cwd=${PWD#$(command git rev-parse --show-toplevel)} \
		&& cd "$top$cwd" \
		&& echo "Changed directory to $top$CYAN$cwd"  \
		;
		return;;
	(clone ) shift; set -- clone-wrapper "$@";;
	(.     ) set -- info;;
	esac
	test "${verbose:-0}" -eq 0 2> /dev/null || echo "git $*"

	command git "$@"
}
for cmd in ga gdm; do
eval "$cmd() { echo 'OBSOLETE: Use g ${cmd#g} instead' >&2; return 1; }"
done
