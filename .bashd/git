# Git related interactive functions

g() {
	local rv=0 root remote err dir src branch

	if test -n "$DOCKER" && test -z "$FORCE_G"; then
		echo "Do not run git in a docker image.  Set FORCE_G to force" >&2
		return 1
	fi

	src=$(awk '/^top_srcdir/{print $3}' Makefile 2> /dev/null)
	if test -n "$src" && test "$(pwd)" != "$(cd "$src"; pwd)"; then
		(
			echo "Found top_srcdir in Makefile.  Re-running in $src"
			cd "$src"
			g "$@"
		)
		return;
	fi

	case $1 in
	(.)
		remote="$(git rev-parse --symbolic-full-name @{upstream} 2> /dev/null)"
		printf 'cwd:%s branch:%s%s%s\n' \
			"$(pwd)" \
			"$(tput setaf 3; git rev-parse --abbrev-ref HEAD)" \
			"$(tput setaf 2)" \
			"${remote:+ (${remote#refs/remotes/})}"
		return
	;;
	# (l1a) if test -t 1; then tig; else git "$@"; fi;; # Train myself to use tig
	(base)
		git worktree list | awk '{print $1; exit}'
		return
	;;
	(r)
		shift
		find . -type d -name .git -exec sh -c '
			cd ${0%.git};
			command git "$@" |
			perl -pe "s@^@sprintf(\"%30s: \", \"${0%/.git}\")@e"' {} "$@" \;
		return
	;;
	(root)
		root=$(git rev-parse --show-toplevel) \
		&& root=$(cd "$root" && pwd 2> /dev/null)/ \
		&& printf '%s\n' "${root}"
		return
	;;
	(co)
		if test "$2" -gt 0 2> /dev/null; then
			branch="${GIT_DEFAULT_BRANCH_PREFIX}$2"
			shift; shift;
			set -- checkout "$branch" "$@"
		fi
		# Check if the current directory is a worktree and reject
		if git worktree list --porcelain |
			awk '/^worktree/ && substr(pwd, 1, length($2)) == $2 {m=1}END{exit !m}' pwd=$(pwd) \
			&& test -z "$FORCE_G"
		then
			echo "You are in a worktree.  Set FORCE_G to override" >&2
			return 1;
		fi
	;;
	esac

	{ err=$( git "$@" 2>&1 >&3 ); } 3>&1
	rv=$?

	if dir="$( printf '%s\n' "$err" | tr -d "'" |
		awk '/is already checked out at/{ print $NF; f=1 }
		END {exit !f}'
	)"; then
		local msg="**** Changing directory to worktree in $dir ****"
		local len=$(printf "%s" "$msg" | wc -c)
		local banner=$(perl -E 'print"*" x '"$len")
		printf "%s\n" "$banner" "$msg" "$banner"
		cd "$dir"
		rv=$?
	elif test -n "$err"; then
		printf '%s\n' "$err" >&2
	fi
	return $rv
}
ga() {
	# When running on both docker and outside, the repos seem to get corrupt
	# in such a way that `git status` cleans it up.  (That is, git diff-index
	# will fail until `git status` is run in that environment.)  So run
	# git status to "uncorrupt" the repo.  Terrible hack.
	git status > /dev/null
	if test "$1" != "-f" && git rev-parse HEAD > /dev/null 2>&1 \
			&& ! git diff-index --quiet HEAD; then
		echo 'Repo is dirty.  -f to force' >&2
		return 1
	fi
	git add "$@";
	list=$(git diff --name-only --cached | tr \\n \ )
	git ci -nm "Add $list";
}
gdm() { # Diff with the merge-base of main/master
	local main_or_master=$(git for-each-ref refs/heads | grep -q main \
		&& echo main || echo master)
	git diff "$@" "$(git merge-base HEAD "$main_or_master")" HEAD
}
git_unpack() {
	local dir sha
	test $# = 0 && { echo 'Expected tarball arg' >&2; return 1; }
	for x; do
		local zip
		test "${x%.tar.gz}" = "$x" || zip=z
		dir="$(set -x; tar -${zip}tf "$x" | awk '{print $1}' FS=/ | sort -u)"
		if ! test "$(echo "$dir" | wc -l | tr -d ' ')" = 1; then
			echo "$x has more than 1 dir or contains newlines:"
			echo "$dir"
			return 1
		fi >&2

		test -e "$dir" && { echo $dir exists; return 1; }
		sha=$(md5sum "$x" | cut -d\  -f 1)
		tar -${zip}xf "$x" \
		&& cd "$dir" \
		&& git init \
		&& git add . \
		&& git commit -n -m "Initial unpack: $sha $(basename $x)"
	done
}
git() {
	case "$1" in
	clone)
		local origin
		# Parse the url to specify a name for origin
		case $2 in
		http*) test -n "$HTTP_OK" ||
			{ echo "Use ssh or set HTTP_OK!!" >&2; return 1; } ;;
		*github*) origin=github;;
		*bitbucket.devops.wepay-inc.*) origin=wepay;;
		esac
		shift;
		test -n "$origin" && echo "Setting origin=$origin"
		set -- clone ${origin:+--origin="$origin"} "$@";
	;;
	esac
	command git "$@";
}
