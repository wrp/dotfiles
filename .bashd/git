# Git related interactive functions


g() { git "$@"; }
git() {
	local v
	v=$(command git --version) || return
	if test -n "$EXPECTED_GIT_VERSION" &&
		test "$v" != "$EXPECTED_GIT_VERSION"
	then
		warn Unexpected git version: $v
		which git
		return 1
	fi

	test $# = 0 && { status=1 branch=1 command git info; return; }

	# replace numeric args with branch name
	local i x prev tmp count=$#
	for x; do
		if test "$prev" != -n && test "$x" -ge 0 2> /dev/null; then
			tmp=$(command git select-branch "$x")
			if test -n "$tmp"; then
				echo "$x --> $tmp" >&2
				x=$tmp
			fi
		fi
		set -- "$@" "$x"
		prev=$x
	done
	for ((i=0; i < count; i+=1)); do shift; done

	case $1 in
	(clone ) git_clone "$@"; return;;
	(dm    ) test "$#" = 1 && set -- dm $(git-base-branch);;
	(.     ) set -- info;;
	esac
	command git "$@"

}
ga() {
	echo 'Use g a instead of ga' >&2
	return 1
}
git_clone() {
	local origin url
	shift    # discard 'clone'
	url=$1
	shift

	# Parse the url to specify a name for origin
	case $url in
	http*)
		# By default, remap name to use ssh
		if test -z "$HTTP_OK"; then
			echo 'Remapping http target to git@ to use ssh.  To force http, set HTTP_OK' >&2
			url=$(printf '%s\n' "$url" | sed -e 's|.*://|git@|' -e 's@/@:@')
			shift
		fi
	;;
	esac
	case $url in
	*github*) origin=github;;
	esac
	test -n "$origin" && echo "Setting origin=$origin" >&2
	set -- clone ${origin:+--origin="$origin"} "$url" "$@";
	command git "$@"
}
