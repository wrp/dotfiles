# Git related interactive functions


g() { git "$@"; }
git() {
	local v
	v=$(command git --version) || return
	if test -n "$EXPECTED_GIT_VERSION" &&
		test "$v" != "$EXPECTED_GIT_VERSION"
	then
		(die Unexpected git version: $v)
		return 1
	fi

	test $# = 0 && { set -- .; }

	# Do aliasing on arguments
	local old_arg prev new_arg
	for old_arg; do
		shift

		# replace numeric args with branch name
		if test "$prev" != -n && test "$old_arg" -ge 0 2> /dev/null; then
			new_arg=$(command git select-branch "$old_arg")
		fi
		case $old_arg in
		(mb    ) new_arg=--merge-base;;
		(no    ) new_arg=--name-only;;
		(bb    ) new_arg=$(git-base-branch) || return 1;;
		esac

		if test -n "$new_arg"; then
			V=1
			old_arg=$new_arg
		fi

		set -- "$@" "$old_arg"
		prev=$old_arg
	done

	case $1 in
	(clone ) v=$1; shift; set -- "$v"-wrapper "$@";;
	(.     ) set -- info;;
	esac
	test "${V-0}" -gt 0 && echo "git $*"
	command git "$@"
}
for cmd in ga gdm; do
eval "$cmd() { echo 'OBSOLETE: Use g ${cmd#g} instead' >&2; return 1; }"
done
