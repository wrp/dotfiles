# Git related interactive functions


g() { git "$@"; }
git() {
	local v
	v=$(command git --version) || return
	if test -n "$EXPECTED_GIT_VERSION" &&
		test "$v" != "$EXPECTED_GIT_VERSION"
	then
		warn Unexpected git version: $v
		which git
		return 1
	fi

	test $# = 0 && { status=1 branch=1 command git info; return; }

	# Do aliasing on arguments
	local i x prev tmp count=$#
	for x; do
		# replace numeric args with branch name
		if test "$prev" != -n && test "$x" -ge 0 2> /dev/null; then
			tmp=$(command git select-branch "$x")
		fi
		case $x in
		(mb    ) tmp=--merge-base;;
		(no    ) tmp=--name-only;;
		(bb    ) tmp=$(git-base-branch) || return 1;;
		esac

		if test -n "$tmp"; then
			echo "$x --> $tmp" >&2
			x=$tmp
		fi

		set -- "$@" "$x"
		prev=$x
	done
	for ((i=0; i < count; i+=1)); do shift; done

	case $1 in
	(clone ) v=$1; shift; set -- "$v"-wrapper "$@";;
	(dm    ) test "$#" = 1 && set -- dm $(git-base-branch);;
	(.     ) set -- info;;
	esac
	command git "$@"

}
ga() {
	echo 'Use g a instead of ga' >&2
	return 1
}
