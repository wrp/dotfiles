_check_if_ignored_by_git() {
	local x
	local pause=no
	for x; do
		if git check-ignore -q "$x"; then
			pause=yes
			echo "WARNING: $x is ignored by git" >&2
		fi
	done
	if test "$pause" = yes; then
		echo "Press enter to continue, q<enter> to abort" >&2
		read k
		if test "$k" = q; then
			return 1
		fi
	fi
}

vg() {
	if test "$1" = grep; then shift; fi
	local pat="+/$1"; if test "$1" = -w; then pat="+/\<$2\>"; fi
	g grep "$@" | vi "$pat"; }

vi() {
	: If no arguments are given and input is from a tty and we are
	: in a git repo, build a file list based on currently modified
	: files or the differences between the current branch and its
	: merge-base with the primary branch.  If input is not from a tty,
	: assume it comes from some program producing
	: filenames followed by a colon and build a list from it.

	: set h for depth, or f for filter
	if ! test -t 1; then
		echo 'Output is not to a terminal.  Aborting' >&2
		return 1
	fi
	if test -t 0; then
		: input is from a tty
		local default=HEAD main_or_master

		# If no arguments are given, try to find most recently changed files from git
		# TODO: figure out how much of this logic belongs in the get-modified-files script
		if test $# = 0 && test -z "$h" && ! git diff --name-only --ignore-submodules | grep -q .; then
			main_or_master=$(git base-branch)
			default=$(git merge-base HEAD "$main_or_master")
			# If the current HEAD is no different than the merge base,
			# set default to 1 so we edit the files changed in the last commit
			if test "$default" = "$(git rev-parse HEAD)"; then
				default=1
			fi
		fi 2> /dev/null
		test $# = 0 && set -- $(FULL_PATH=1 f="$f" get-modified-files ${h-$default})
	else
		: input is NOT from a tty.  Filter input and build a list of files to edit
		# Strip the input to valid filenames and uniquify.  This allows the raw
		# output of `git grep` to be used as input, but will fail if any names contain
		# whitespace or a colon.  (So the user doesn't have to edit previous grep commands with a -l)
		# There is no sane way to pass names in a pipe without using a null terminator as a separator,
		# and I do not want to accomodate the brain dead-practice of using whitespace in filenames.
		# If there are names with whitespace or colons, construct the arguments manually.
		set -- "$@" $(grep -v "${VIM_IGNORE_FILES:-^$}" |
			awk '{gsub("[[:space:]]", "", $0)} 1' |  # remove leading whitespace
			awk '!a[$1]++{print $1}' FS='[:[:space:]]'
		)
		if test $# = 0; then
			echo 'No names found in input' >&2
			return 1
		fi
		exec < /dev/tty
	fi
	if git rev-parse --git-dir > /dev/null 2>&1; then
		_check_if_ignored_by_git "$@" || return 1
	fi
	vim "$@"    # .vimrc sets tmux titles
}
