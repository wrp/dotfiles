#!/bin/sh
# usage: @@name@@ [arg ...]
#
# Execute this file to load up the tmux paste buffer.  With
# commands to populate dotfiles.  Use `-c` to omit the commands
# and just load the content into the past buffer.
# Unset TMUX if you really want to just execute the script.
# Pass args such as bashrc or bash_profile to load just one file.

# Use -h for help and a list of available files.

if (return 0 2>/dev/null); then
	echo 'Do not source this.  Just execute it!' >&2
	return 1
fi

available=$(
	sed -e '1,/UNI[Q]UE_STRING/d' -e '/^#[^#]/!d' -e 's/^# /    /' $0
)

unset text_only
case "$1" in
-h)
	sed -e 1d -e "s|@@name@@|$(basename $0)|" -e '/^#/!q' -e 's/# *//' $0
	printf "Available files:\n%s\n" "$available"
	exit
	;;
-c)
	shift
	text_only=1;;
'')
	set -- $available
	;;
esac


if test -n "$TMUX"; then
	for x; do
		sed -n -E "/^# [.]?${x}$/,/^-* EOF -*/p" $0 \
		| if test -n "$text_only"; then
			sed -e 2d -e '$d'
		else
			cat;
		fi \
		| if grep .; then
			if test -n "$text_only"; then
				echo "copied text of $x to clipboard" >&2
			else
				echo "copied command to populate $x to clipboard" >&2
			fi
		else
			echo "No text copied to clipboard for $x!" >&2
		fi
	done \
	| expand \
	| sed -e "s|@@EMAIL@@|$EMAIL|g" \
	| tmux loadb -
	exit
fi
## UNIQUE_STRING

# .bashrc
grep -q '###$%&^@%$&###' $HOME/.bashrc ||
cat << '-------------- EOF --------------' >> $HOME/.bashrc
#################$%&^@%$&#######################################################
read_file() { for f; do test -f "$f" && . "$f"; done; }
unalias -a
shopt -s histappend
trap 'history -a' DEBUG
HISTTIMEFORMAT='%H:%M:%S '
HISTFILESIZE=9999999999
unset PROMPT_COMMAND
export EVENT_NOKQUEUE=1
export LSCOLORS=fxfxcxdxbxegedabagacad
export LESS=FeRXSQM#.95
export SYSTEMD_LESS="${LESS//S/}"
export LC_TIME=C
set -o vi
set -o physical   # make pwd do the right thing w.r.t. symbolic links
PS1="\[$(tput rev)"'$( r=$(( $? != 0 )); tput setaf $((2 - r));
        tput setab $(( r * 7 ));
        )\]\D{%T}'"\[$( tput setaf 2)$(tput sgr0)\]"' $$ \h\$ '

c() { clear; }
dvtm_title() { printf '\033]0;%s\007' "$*"; }
g() { git "$@"; }
ta() { tmux attach; }
curl() { command curl -Ss "$@"; }
epoch() { perl -pe 's/([0-9]{9,10})/sprintf "%s (%sUTC)", $1,
        scalar gmtime $1/ge' "$@"; }
trim() { perl -nE "chomp; say substr \$_, 0, ${COLUMNS-$(tput cols)} - 1" "$@"; }
vi() { vim "$@"; }
reset_auth_sock() {
	local c=$( tmux show-env SSH_AUTH_SOCK 2> /dev/null | cut -d= -f2 )
	test -n "$c" && SSH_AUTH_SOCK="$c"
}
trap reset_auth_sock SIGWINCH
complete -r gsutil 2> /dev/null
complete -r gcloud 2> /dev/null
complete -r bq 2> /dev/null
read_file "$HOME"/.bash-local
-------------- EOF --------------

ln -s .bash_history $HOME/.bash-history


# .bash_profile
cat << '-------------- EOF --------------' > $HOME/.bash_profile
[[ "$-" =~ i ]] && test -n "$BASH" && test -f $HOME/.bashrc && . $HOME/.bashrc
-------------- EOF --------------


# .vimrc
cat << '-------------- EOF --------------' > $HOME/.vimrc
noremap v V
noremap V v
noremap ; :
noremap , ;
syntax on
set nowrapscan
let loaded_matchparen = 1
set path+=~
set includeexpr=substitute(v:fname,'$DAEMON_PATH/','','g')
set t_ti= t_te=  " Disable clear screen on exit
set novisualbell
set noerrorbells
set wildmenu
set wildmode=longest,list,full
highlight Comment ctermfg=darkcyan
highlight String ctermfg=darkcyan
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
-------------- EOF --------------


# .inputrc
cat << '-------------- EOF --------------' > $HOME/.inputrc
set editing-mode vi
set keymap vi
-------------- EOF --------------

# .tmux.conf
cat << '-------------- EOF --------------' > $HOME/.tmux.conf
unbind C-b
set -g prefix C-k
bind C-k send-prefix
set -g window-status-current-style fg=yellow,bold,bg=black
set -g window-status-current-format '#{?automatic-rename,#{pane_title},#{window_name}}'
set -g window-status-format '#{?automatic-rename,#{pane_title},#{window_name}}'
set -g status-left-length 25
set -g status-right '%H:%M %e-%b'
set -g status-style bg=red
set-option -g update-environment "SSH_AUTH_SOCK"
set -g history-limit 25000
bind-key -n Left previous-window
bind-key -n Right next-window
bind-key -T root C-b swap-window -t -1
bind-key -T root C-n swap-window -t +1
bind-key C-i rotate-window -D
bind-key ',' command-prompt "rename-window '%%'"
bind-key '$' command-prompt "rename-session '%%'"
set-hook -g client-attached 'run-shell "kill -s WINCH $(ps -ax | grep [b]ash)"'
-------------- EOF --------------


# .editrc
cat << '-------------- EOF --------------' > $HOME/.editrc
bind -v
-------------- EOF --------------


# .gitconfig
EMAIL=@@EMAIL@@
cat << EOF > $HOME/.gitconfig &&
[user]
        email = ${EMAIL:?}
        name = ${USER}
EOF
cat << '-------------- EOF --------------' >> $HOME/.gitconfig
[alias]
	ap = add --patch
	b = branch -vv
	cda = commit -a -m Documentation
	cfa = commit -a -m 'Trivial reformat'
	cp = cherry-pick -x
	cra = commit -a -m 'Trivial refactor'
	csa = commit -a -m'Sanity Check'
	cwa = commit -a -m 'Whitespace'
	ciam = commit -a -m
	ci = commit
	caa = !bash -c '"git commit --amend -a -m \"$(git log --format=format:%B -n 1)\" --cleanup=strip"'
	caan = !bash -c '"git commit --amend -an -m \"$(git log --format=format:%B -n 1)\" --cleanup=strip"'
	co = checkout
	dc = diff --cached
	d = diff
	dn = diff --numstat
	dno = diff --name-only
	dw = diff --word-diff
	l = log --oneline --decorate --format=format:'%Cgreen%h%Cred %<(10,trunc)%an%Cblue%D%Creset %<(80,trunc)%s'
	l1 = log --format=format:'%Cgreen%h%Cred %<(10,trunc)%an%Creset %<(60,trunc)%s %Cblue%D%Creset'
	ld = log --format=format:'%Cgreen%h%C(yellow) %cr %Cred %<(10,trunc)%an%Creset %<(60,trunc)%s %Cblue%D%Creset'
	lt  = log --format=format:'%<(80,trunc)%s %Cblue%D%Creset'
	l1a = log --format=format:'%Cgreen%h%Cred %<(10,trunc)%an%Creset %<(80,trunc)%s %Cblue%d%Creset' --graph
	l1ah = log -n 10 --format=format:'%Cgreen%h%Cblue%d%Creset %<(80,trunc)%s' --graph
	la = log --oneline --graph --decorate --format=format:'%Cgreen%h%Cblue%d%Creset %<(80,trunc)%s'
	lh  = log -n 10 --decorate --format=format:'%Cgreen%h%Cred %<(10,trunc)%an%Creset %<(60,trunc)%s %Cblue%D%Creset' --graph
	l1h = log -n 10 --decorate --format=format:'%Cgreen%h%Cred %<(10,trunc)%an%Creset %<(60,trunc)%s %Cblue%D%Creset' --graph
	s = status -uno
	sp = stash pop
	ss = stash save
	exec = "!exec "
	ll = log --stat
[core]
	editor = vim
[push]
	default = current
[pager]
	status = true
[versionsort]
	prereleaseSuffix = .rc
[color "branch"]
	meta = red green bold
[color]
	branch = true
[pull]
	rebase = true
-------------- EOF --------------
