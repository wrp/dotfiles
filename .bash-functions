auth() {
	gcloud auth login &&
	gcloud auth application-default login &&
	gcloud auth list
}

check_directory_existence() {
	local cfg dir d
	dir=$1
	shift
	for cfg; do
		d=${dir%/}/$cfg
		if ! test -d "$d"; then
			if test -e "$d"; then
				warn "$d exists but is not a directory"
			else
				warn "The directory $d/ does not exist; creating..."
				mkdir -p "$d"
			fi
		fi
	done
}

clear_path() {
	# Ensure that $1 is not in PATH
	PATH=$(echo "$PATH" | sed \
		-e "s@:$1:@:@g" \
		-e "s@^$1:@@" \
		-e "s@:$1\$@@" \
	)
}
prepend_path() { local x; for x; do clear_path "$x"; PATH="$x${PATH:+:}$PATH"; done; }

# Do a sanity check on shell variables, mostly to ensure
# that variables that I intend for use interactively in
# helper functions are not inadvertenly set
check_environment() {
	local x
	for x in f h t; do
		eval "test -n \"\$$x\"" && warn "shell variable $x is set"
	done
	if test "$IFS" != $' \t\n'; then
		echo "WARNING: IFS contains unexpected characters"
	fi
}

this_shell_is_running_in_current_pane() {
	test "$(tmux display -p "#{pane_id}")" = "$TMUX_PANE"
}

after_cmd() {
	# Run after a command, and before a prompt is displayed
	# In  3.2.57(1)-release (arm64-apple-darwin23), PIPESTATUS
	# seems to be completely broken and is always 0.
	local _status=$? ps="${PIPESTATUS[@]}"
	if test -s "$HISTFILE"; then
		report_cmd_status "$HISTFILE" "$ps" >> "$HOME"/.bash-history
	fi
	check_environment
	if test -z "$NO_RESET_TITLE"; then
		if this_shell_is_running_in_current_pane; then
			window-title
		else
			window-title "** $WRP_TITLE"
		fi
	fi
	unset NO_RESET_TITLE
	type -t local_post_cmd_hook > /dev/null && local_post_cmd_hook
	unset running_in_debug_trap

	return $_status
}

for args in '-f %m' '--format %Y'; do
	if eval stat $args / > /dev/null 2>&1; then
		eval "get_mtime() { stat $args \"\$1\"; }"
		break;
	fi
done
if ! type get_mtime > /dev/null 2>&1; then
	warn Unable to figure out how to get mtime using stat. Please fix.
	get_mtime() { echo 0; }
fi

write_hist_file() {
	test "$BASH_COMMAND" = after_cmd && return
	local now updated delta
	test -z "$HISTFILE" && { warn HISTFILE unset; return 1; }
	now=$(date +%s) || return 1
	if ! test -s "$HISTFILE"; then
		history -w || warn 'history -w failed'
	else
		history -a || warn 'history -a failed'
	fi
	updated=$(get_mtime "$HISTFILE")
	delta=$((now - updated))
	if test "$delta" -ge 60; then
		warn -c HISTFILE not updated for $delta seconds
	fi

	test -f "$HISTFILE" || warn HISTFILE does not exist
}

debug_trap() {
	: Runs before a command in an interactive shell

	if test -n "$running_in_debug_trap"; then
		return
	fi
	running_in_debug_trap=1 # Unset via PROMPT_COMMAND
	write_hist_file

	case ${BASH_COMMAND%% *} in
	after_cmd|debug_trap)
		# Do not reset window title after these commands
		NO_RESET_TITLE=1
		;;
	*)
		window-title "${BASH_COMMAND%% *}"
		;;
	esac
} >&2

#1698377918 (YYYY-MM-DDTHH:MM:SS+0 pid:1121 /Users/wrp/3rd-party/tmux) ok
report_cmd_status() {
	# Clean up the most recent command in $1 and append it to global .bash-history.
	# Note that the FAILED string is used in scripts/search-bash-history
	test -f "$1" && tac "$1" | STATUS="$2" perl -MPOSIX -pe '
		if( /^#[0-9]{10}$/ ) { # abort after adding the timestamp.
			$ts = substr($_, 1, 10);
			s@([0-9]{10})@sprintf "%s (%s pid:%d %s:%s) %s",
				$ts,
				POSIX::strftime("%FT%T%z", localtime $ts),
				'"$$"',
				"'"$(hostname)"'",
				"'"${PWD}"'",
				$ENV{STATUS} =~ "1" ? "FAILED" . " $ENV{STATUS}" : "ok",
				@ge;
			print;  # Since about to skip auto print by exiting
			exit 0; # Exit so we only process most recent command
		}
	' | tac
}

die() { test -n "$*" && printf 'FATAL: %s\n' "$*" >&2; exit 1; }
check_cache() {
	local now
	local then
	eval "then=\${WARN_CACHE_$1-0}"
	now=$(date +%s)
	eval "export WARN_CACHE_$1=$now"
	test "$((now - then))" -lt 5
}
warn() {
	local eol='\n'
	if test "$1" = -c; then
		shift
		eol='\r'
		check_cache "$@" && return
	fi
	test -z "$NOWARN" && printf "WARNING: %s${eol}" "$*" >&2
}

window-title() {
	test -t 1 || return;
	while test "${1#-}" != "$1"; do shift; done;
	local t
	if type deactivate 2> /dev/null >&2; then
		t=1
	fi
	WRP_TITLE="$@"
	deactivate_is_defined=$t set-title "$@";
}
