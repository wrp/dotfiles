auth() {
	gcloud auth login &&
	gcloud auth application-default login
}

check_directory_existence() {
	local cfg dir d
	dir=$1
	shift
	for cfg; do
		d=${dir%/}/$cfg
		if ! test -d "$d"; then
			if test -e "$d"; then
				warn "$d exists but is not a directory"
			else
				warn "The directory $d/ does not exist; creating..."
				mkdir -p "$d"
			fi
		fi
	done
}

clear_path() {
	# Ensure that $1 is not in PATH
	PATH=$(echo "$PATH" | sed \
		-e "s@:$1:@:@g" \
		-e "s@^$1:@@" \
		-e "s@:$1\$@@" \
	)
}
prepend_path() { for x; do clear_path "$x"; PATH="$x${PATH:+:}$PATH"; done; }

# Do a sanity check on shell variables, mostly to ensure
# that variables that I intend for use interactively in
# helper functions are not inadvertenly set
check_environment() {
	for x in f h t V; do
		eval "test -n \"\$$x\"" && warn "shell variable $x is set"
	done
	if test "$IFS" != $' \t\n'; then
		echo "WARNING: IFS contains unexpected characters"
	fi
}

after_cmd() {
	# Run after a command, and before a prompt is displayed
	# In  3.2.57(1)-release (arm64-apple-darwin23), PIPESTATUS
	# seems to be completely broken and is always 0.
	local _status=$? ps="${PIPESTATUS[@]}"
	if ! test -s "$HISTFILE"; then
		warn $HISTFILE is empty
	else
		report_cmd_status "$HISTFILE" "$ps" >> "$HOME"/.bash-history
	fi
	check_environment
	if test -n "$RESET_TITLE"; then
		window-title
		unset RESET_TITLE
	fi
	type -t local_post_cmd_hook > /dev/null && local_post_cmd_hook

	return $_status
}

make_hist_file() {
	test -s "$HISTFILE" || { printf '# '; date; } >> $HISTFILE
}

debug_trap() {
	: Runs before a command in an interactive shell
	# warning: if you execute a loop, this will run for every iteration
	# It also runs for every command in a pipeline
	# TODO: figure out how to suppress that behavior

	history -a || warn "history -a failed"
	test -f "$HISTFILE" || warn HISTFILE does not exist

	case ${BASH_COMMAND%% *} in
	:\
	|after_cmd\
	|debug_trap\
	|echo\
	|exec\
	|g|git\
	|head\
	|pwd\
	|return\
	|sed\
	)
		: Do not set window title for these commands ;;
	cd|ls)
		RESET_TITLE=1;;
	*)
		window-title "${BASH_COMMAND%% *}";;
	esac
} >&2

#1698377918 (YYYY-MM-DDTHH:MM:SS+0 pid:1121 /Users/wrp/3rd-party/tmux) ok
report_cmd_status() {
	# Clean up the most recent command in $1 and append it to global .bash-history.
	# Note that the FAILED string is used in scripts/search-bash-history
	test -f "$1" && tac "$1" | STATUS="$2" perl -MPOSIX -pe '
		if( /^#[0-9]{10}$/ ) { # abort after adding the timestamp.
			$ts = substr($_, 1, 10);
			s@([0-9]{10})@sprintf "%s (%s pid:%d %s:%s) %s",
				$ts,
				POSIX::strftime("%FT%T%z", localtime $ts),
				'"$$"',
				"'"$(hostname)"'",
				"'"${PWD}"'",
				$ENV{STATUS} =~ "1" ? "FAILED" . " $ENV{STATUS}" : "ok",
				@ge;
			print;  # Since about to skip auto print by exiting
			exit 0; # Exit so we only process most recent command
		}
	' | tac
}

die() { test -n "$*" && printf 'FATAL: %s\n' "$*" >&2; exit 1; }
warn() { test -z "$NOWARN" && printf 'WARNING: %s\n' "$*" >&2; }

window-title() {
	test -t 1 || return;
	while test "${1#-}" != "$1"; do shift; done;
	local t
	if type deactivate 2> /dev/null >&2; then
		t=1
	fi
	deactivate_is_defined=$t set-title "$@";
}
