#!/bin/sh

# This script is invoked after GIT_EDITOR and takes the name
# of a file containing the proposed commit message as $1

. "$(dirname $0)"/common-hook-functions


main() {
	if test -z "$MAX_GIT_WIDTH"; then
		MAX_GIT_WIDTH=$(git config core.max-message-width 2> /dev/null)
	fi
	if test -z "$MAX_GIT_SUMMARY"; then
		MAX_GIT_SUMMARY=$(git config core.max-summary-width 2> /dev/null)
	fi
	msg=$(check_message "$@") || die "$msg"
	validate_trailers "$@"
	run_local_hooks "$@"
}

check_message() {
	bad_end='.!?'  # Characters not allowed as final char of subject

	< "$1" awk '
		/^#/ { next }
		NR==1 && match($0, end) {
			printf "Summary should not end with punctuation\n"
			status=1
		}
		NR==1 && length > max_summary {
			printf "Summary is %d chars too long" \
				" (max width is %d)\n", length - max_summary, max_summary
			status=1
		}
		NR==1 && ! match($0, "^[A-Z]") {
			printf "Summary should start with a capital letter"
			status=1
		}
		NR > 1 && length > max_width {
			printf "Line %d (%s...) is %d chars too long (max width is %d)\n", \
				NR - 2, substr($0, 1, 10), length - max_width, max_width
			status=1
		}
		END {exit status}

	' max_width=${MAX_GIT_WIDTH:-72} max_summary=${MAX_GIT_SUMMARY:-50} end="[${bad_end}]$"
}

# Ensure that all required trailers are present
validate_trailers() {
	local fail
	local present_trailers=$(git interpret-trailers --parse "$1")
	for value in $(git config --get-all commit.required-trailer); do
		if ! echo "$present_trailers" |
		awk '$1 == "'"$value"'" {print $2}' FS=': ' | grep -q .; then
			fail=${fail:+$fail, }$value
			echo "Required trailer '$value' is missing" >&2
		fi
	done
	if test -n "$fail"; then die "Trailers missing: $fail"; fi
}

main "$@"
