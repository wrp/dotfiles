
die() {
	STFU= header=FATAL warn "$@"
	printf 'Use --no-verify (-n) to ignore\n'
	exit 1
} >&2

unset header
warn() {
	local name=$(basename "${0}")
	test -n "$STFU" && return
	local delim
	if test $# = 0; then delim=''; else delim=': '; fi
	local prefix=$(printf '[%7s] %s%s' "${header-WARNING}" "$name" "$delim")
	printf "${prefix}%s\n" "$@"
} >&2

_run_file() {
	local hook=$1
	local index_hash
	shift
	if test -x "$hook"; then
		index_hash=$(git ls-files -s | md5sum -)
		"$hook" "$@" || die "$hook failed"
		if test "$(git ls-files -s | md5sum -)" != "$index_hash"; then
			die "$hook modified the index"
		fi
	elif test -e "$hook"; then
		warn "$hook exists but is not executable"
	fi
}

run_local_hooks() {
	# If $GIT_DIR/local-hooks/ exists, execute scripts there.
	# Note that this does not attempt to duplicate stdin to the
	# script, as that functionality has not yet been necessary.
	local hook_file="$(dirname $(dirname $0))/local-hooks/$(basename $0)"
	local hook_dir="${hook_file}.d"
	local hook

	for hook in "$hook_file" "$hook_dir"/*; do
		_run_file "$hook" "$@"
	done
}

is_subproject() {
	git rev-parse --show-superproject-working-tree | grep -q .
}
