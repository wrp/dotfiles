#!/bin/sh

. "$(dirname $0)"/common-hook-functions

valid_chars='+:a-zA-Z0-9_./-'  # Characters that are acceptable in path names
against=$(git rev-parse --verify HEAD 2>/dev/null || git hash-object -t tree /dev/null)


validate_pathnames() {
	# Reject names with non standard characters
	if invalid=$(git diff --cached --name-only --diff-filter=A -z $against |
		LC_ALL=C tr -d "\000${valid_chars}" | xxd | cut -d: -f 2- | tr -s ' ' | grep .)
	then
		die "Invalid characters in filename: $invalid"
	fi
}

modeline_suggests_tabs() { grep -q '^# vim:.* noet' "$1"; }
file_is_python() { file "$1" | grep -qi python; }
file_is_makefile() { file "$1" | grep -qi makefile; }
check_taint() {
	if git diff --cached | grep --color=always -C 3 'DO NOT COMMIT'; then
		die 'The commit is tainted!!  Stubbornly refusing to commit';
	fi
}

unwanted() {
	# Write "tab" or "space"; whichever is unwanted for the file in $1
	if modeline_suggests_tabs "$1"; then
		echo space
	elif file_is_python "$1"; then
		echo tab
	elif file_is_makefile "$1"; then
		echo space
	else
		case $(git config core.whitespace) in
		tab-in-indent) echo tab;;
		*) echo space;;
		esac
	fi
}

indentation_is_okay() {
	# Sigh.  With core.whitespace set to 'indent-with-no-tab' and
	# apply.whitepace set to 'error', git diff-index does not treat
	# a leading tab follwed by space as an error.  So we need to
	# explicitly check for any spaces in the indentation.

	# git-diff-index also does not treat space at the start of the line as an
	# error if the amount of space at the start of a line is less
	# than core.whitespace.tabwidth.
	# core.whitespace can be a comma-separated list; eg
	# core.whitespace = indent-with-non-tab,tabwidth=4
	local tab=$(printf '\t')
	local pattern
	git status --porcelain | grep '^M\|A' | while read m path; do
		bad_character=$(unwanted "$path")
		case $bad_character in
		space) pattern="^[+]${tab}*[ ][^*]";;
		tab) pattern="^[+][ ]*${tab}";;
		*) die "Cannot recognize file type $path";;
		esac
		if git diff --cached $path | grep -E "$pattern"; then
			echo "unwanted $bad_character in indent in $path" >&2
			return 1
		fi
		if git diff --cached $path | grep -E "^[+][^{$tab}]+${tab}"; then
			echo "tab character found after indent in $path"
			return 1
		fi
	done
}

trailing_whitespace_ok() {
	# git diff index --check is completely useless for check indentation.
	# We want python to always be idented with spaces, and go and Makefiles
	# to always be indented with tabs, but core.whitespace does not give
	# the necessary granularity.  But we do occasionally want to use
	# core.whitespace with indent-with-non-tab or tab-in-indent
	# to get highlighting in git diff.  So we either need to set the
	# config to a reasonable value (race condition :( ) or just stop
	# using git diff-index completely.
	local v=$(git config core.whitespace)
	test "$v" = trailing-space || git config core.whitespace trailing-space
	git diff-index --check --cached $against --
	test "$v" = trailing-space || git config core.whitespace "$v";
}

validate_whitespace() {
	if test -n "$ALLOW_WHITESPACE_ERRORS" \
		|| test "$(git config apply.whitespace)" = nowarn
	then
		return 0
	fi

	if ! { indentation_is_okay && trailing_whitespace_ok; } ; then
		if git config apply.whitespace | grep -q error; then
			func=die
		else
			func=warn
		fi
		$func 'invalid whitespace' \
			'To ignore: ALLOW_WHITESPACE_ERRORS=1' \
			'To allow: git config apply.whitespace warn'
	fi
}

main() {
	validate_pathnames "$@"
	validate_whitespace "$@"
	run_local_hooks "$@"
	check_taint
}

main "$@"
