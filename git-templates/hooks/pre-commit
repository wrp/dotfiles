#!/bin/sh

. "$(dirname $0)"/common-hook-functions

valid_chars='+:a-zA-Z0-9_./-'  # Characters that are acceptable in path names
against=$(git rev-parse --verify HEAD 2>/dev/null || git hash-object -t tree /dev/null)


validate_pathnames() {
	# Reject names with non standard characters
	if invalid=$(git diff --cached --name-only --diff-filter=A -z $against |
		LC_ALL=C tr -d "\000${valid_chars}" | xxd | cut -d: -f 2- | tr -s ' ' | grep .)
	then
		die "Invalid characters in filename: $invalid"
	fi
}

unwanted() {
	# Return "tabs" or "spaces"; whichever is unwanted for the file named in $1
	if file "$1" | grep -i python; then
		echo tabs
	else
		echo spaces
	fi
}

indentation_is_okay() {
	# Sigh.  With core.whitespace set to 'indent-with-no-tab' and
	# apply.whitepace set to 'error', git diff-index does not treat
	# a leading tab follwed by space as an error.  So we need to
	# explicitly check for any spaces in the indentation.

	# git-diff-index also does not treat space at the start of the line as an
	# error if the amount of space at the start of a line is less
	# than core.whitespace.tabwidth.
	# core.whitespace can be a comma-separated list; eg
	# core.whitespace = indent-with-non-tab,tabwidth=4
	local tab=$(printf '\t')
	local pattern
	git status --porcelain | grep '^M' | while read m path; do
		bad_character=$(unwanted $path)
		case $bad_character in
		spaces) pattern="^[+]${tab}*[ ]";;
		tabs) pattern="^[+][ ]*${tab}";;
		*) die "Cannot recognize file type $path";;
		esac
		if git diff --cached $path | grep -E "$pattern"; then
			echo "unwanted $bad_character in indent in $path" >&2
			return 1
		fi
		if git diff --cached $path | grep -E "^[+][^{$tab}]+${tab}"; then
			echo "tab character found after indent in $path"
			return 1
		fi
	done
}

whitespace_ok() {
	git diff-index --check --cached $against --
}

validate_whitespace() {
	if test -n "$ALLOW_WHITESPACE_ERRORS"; then
		return 0
	fi

	if ! { indentation_is_okay && whitespace_ok; } ; then
		if git config apply.whitespace | grep -q error; then
			func=die
		else
			func=warn
		fi
		$func 'invalid whitespace' \
			'To ignore, do one of:' \
			'  * set "git config apply.whitespace warn"' \
			'  * set ALLOW_WHITESPACE_ERRORS'
	fi
}

main() {
	validate_pathnames "$@"
	validate_whitespace "$@"
	run_local_hooks "$@"
}

main "$@"
