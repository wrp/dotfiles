#!/bin/sh

warn() { printf "WARNING(%7s): %s\n" "$@"; } >&2
main() {
	if # Succeed early on some common cases we do not want to check
		test -n "$3" || # this is from an extant commit (-c, -C, or --amend)
		test "$2" != message || # the message was given by -m or -F
	false; then
		return 0
	fi

	get_ticket "$1" || return 1
	if test -n "$ticket"; then
		git-interpret-trailers --in-place --if-exists addIfDifferent --trailer ticket="$ticket" "$1"
	fi
	local_hook="$(dirname $(dirname $0))/local-hooks/$(basename $0)"
	if test -x "$local_hook"; then
		"$local_hook" "$@" || die $local_hook failed
	fi
}

get_ticket_from_extant_message() {
	git interpret-trailers --parse "$1" |
	awk '$1 == "ticket" { print $2}' FS=': '
}

get_ticket() {
	test -n "$ticket" && return

	branch=$(git branch --show-current)
	if test -z "$branch"; then
		# Maybe we are rebasing; try to get the original branch name
		for i in rebase-merge rebase-apply; do
			p=$(git rev-parse --git-path $i)
			if test -d "$p"; then
				branch=$(sed -e 's@refs/heads/@@' "$p"/head-name)
				break;
			fi
		done
	fi
	ticket=$(
		# get-ticket-from-branch is expected to be a local
		# script that may not exist
		git config branch."$branch".ticket ||
		get-ticket-from-branch "$branch" 2> /dev/null
	)
	ticket=$(get_ticket_from_extant_message "$1")

	if test -z "$ticket"; then
		if test "$(git config core.require-ticket)" = true \
		|| test "$(git config branch.$branch.require-ticket)" = true
		then
			warn "$(git rev-parse --short HEAD)" "setting ticket to None"
			ticket=None
		else
			warn "$(git rev-parse --short HEAD)" "not inserting ticket trailer"
		fi
	fi >&2
}

main "$@"
