#!/bin/sh

# Parse the $t variable and use it to apply trailers
# to the commit message.  Also, check the branch.$branch.ticket
# config to attempt to auto-insert a ticket trailer.

. "$(dirname $0)"/common-hook-functions
main() {
	if # Succeed early on some common cases we do not want to check
		test -n "$3" || # this is from an extant commit (-c, -C, or --amend)
		test "$2" != message || # the message was given by -m or -F
	false; then
		return 0
	fi

	get_ticket "$1" || return 1
	if test -n "$ticket"; then
		git-interpret-trailers --in-place --if-exists addIfDifferent --trailer ticket="$ticket" "$1"
	fi
	check_t_for_trailers "$@"
	validate_trailers "$@"
	run_local_hooks "$@"
}

# The environment variable t can be a comma-separated list of
# trailer-value pairs in the form name:value.  Insert them as
# trailers into the commit message
check_t_for_trailers() {
	printf '%s\n' "$t" | tr , \\n |
	while IFS=: read name value; do
		git-interpret-trailers --in-place --if-exists addIfDifferent --trailer "$name=$value" "$1"
	done
}

# Ensure that all requested trailers are present
validate_trailers() {
	for value in $(git config --get-all commit.required-trailer); do
		if ! git interpret-trailers --parse "$1" |
		awk '$1 == "'"$value"'" {print $2}' FS=': ' | grep -q .; then
			die "Required trailer '$value' is missing"
		fi
	done
}

get_ticket_from_extant_message() {
	git interpret-trailers --parse "$1" |
	awk '$1 == "ticket" { print $2}' FS=': '
}

get_ticket() {
	test -n "$ticket" && return

	branch=$(git branch --show-current)
	if test -z "$branch"; then
		# Maybe we are rebasing; try to get the original branch name
		for i in rebase-merge rebase-apply; do
			p=$(git rev-parse --git-path $i)
			if test -d "$p"; then
				branch=$(sed -e 's@refs/heads/@@' "$p"/head-name)
				break;
			fi
		done
	fi
	ticket=$(
		# get-ticket-from-branch is expected to be a local
		# script that may not exist
		git config branch."$branch".ticket ||
		get-ticket-from-branch "$branch" 2> /dev/null
	)
	ticket=$(get_ticket_from_extant_message "$1")

	if test -z "$ticket"; then
		msg="not inserting ticket trailer"
		if test "$(git config core.require-ticket)" = true \
		|| test "$(git config branch.$branch.require-ticket)" = true
		then
			msg="setting ticket to None"
			ticket=None
		fi
		if test "$(git config advice.warn-if-no-ticket)" = true; then
			warn "($(git rev-parse --short HEAD)) $msg"
		fi
	fi >&2
}

main "$@"
