noremap v V
noremap V v
noremap ; :
noremap , ;
noremap ' `
noremap ` '
noremap bd! :bd<cr>:bn<cr>
noremap gw :Windo set wrap!
com! Nt :NERDTree

function! Get_option(name, default)
	return trim(system('guess-vim-setting ' . a:name . ' ' .
	\ expand('%:p') . ' ' . expand(&filetype) . ' || echo ' . a:default))
endfunction

function! Guess_expandtab()
	if Get_option('expandtab', 'noexpandtab') == 'expandtab'
		set expandtab
	else
		set noexpandtab
	endif
endfunction


set noexpandtab
let &tabstop = 8
set shiftwidth=8

" Just like windo, but restore the current window when done.
function! WinDo(command)
  let currwin=winnr()
  execute 'windo ' . a:command
  execute currwin . 'wincmd w'
endfunction
com! -nargs=+ -complete=command Windo call WinDo(<q-args>)

function! ClearWhite()
	" A bit hacky: if you :let g:keep_white=1 before you
	" do any writes, you can keep trailing whitespace
	if !exists("g:keep_white") || g:keep_white != 1
		let l:save_pos = getcurpos()
		execute '%s/\s\+$//e'
		call cursor(l:save_pos[1:])
		call histdel("search", -1)
	endif
endfunction

packadd! matchit
let b:match_words = '<<<<<<<:=======:>>>>>>>'


" inoremap jk <esc>
" set cindent
" set relativenumber  numberwidth=8
" set sidescroll=1
" set smartindent
" set textwidth=80 " Auto-inserts newlines to preserve width
" set virtualedit=all
let loaded_matchparen=1
set autoindent
set foldopen-=search
set hlsearch
set iskeyword=@,48-57,_,192-255,-
set laststatus=2   " Always show status line
set listchars=extends:%,precedes:%,eol:$,tab:>-,trail:$
set matchpairs+=<:>
set modeline
set modelines=10
set noerrorbells
set novisualbell
set nowrap
set nowrapscan
set scrolloff=0
set statusline=%m%r%f\ %y%=%l/%L(%p%%)\ %n
set t_ti= t_te=  " Disable clear screen on exit
set tildeop
set viminfofile=$HOME/.config/vim/viminfo
set wildmenu
set wildmode=longest,list,full
highlight ColorColumn ctermbg=green
highlight Search ctermfg=red ctermbg=blue
highlight Folded ctermbg=black
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
syntax on

" Attempt to deal with a brain-dead coding style that
" does not put { in the first column
"map [[ ?{<CR>w99[{<esc>:nohlsearch<Enter>:call histdel("search", -1)<ENTER>:let @/ = histget("search", -1)<ENTER>
"map ][ /}<CR>b99]}<esc>:nohlsearch<Enter>:call histdel("search", -1)<ENTER>:let @/ = histget("search", -1)<ENTER>
"map ]] j0[[%/{<CR><esc>:nohlsearch<Enter>:call histdel("search", -1)<ENTER>:let @/ = histget("search", -1)<ENTER>
"map [] k$][%?}<CR><esc>:nohlsearch<Enter>:call histdel("search", -1)<ENTER>:let @/ = histget("search", -1)<ENTER>
"map [[ ][%
"map ]] ][][%


if &diff
	highlight DiffAdd ctermbg=5
endif

au BufNewFile,BufRead .bash-history setlocal path+=$HOME/.bash-history-dir
au BufNewFile *.c r ~/.vim/skeleton.c
au BufNewFile *.cc r ~/.vim/skeleton.cc
au BufNewFile *.rs r ~/.vim/skeleton.rs
au BufNewFile *.go r ~/.vim/skeleton.go
au BufNewFile *.zig r ~/.vim/skeleton.zig

set includeexpr=substitute(v:fname,'^//','','')

let g:markdown_recommended_style=0
filetype plugin on

highlight Comment ctermfg=darkcyan
highlight DiffChange ctermbg=25
highlight DiffAdd    term=bold ctermbg=5
highlight DiffDelete term=bold ctermfg=12 ctermbg=159
highlight DiffText   term=reverse cterm=bold ctermbg=7
set cinkeys="0{,0},0),!^F,o,O,e"

set formatoptions=cq
set comments=

set swapfile
set directory^=~/.run/vim/swap//
set writebackup
set backupcopy=auto
if has("patch-8.1.0251")
        set backupdir^=~/.run/vim/backup//
end
set undofile
set undodir^=~/.run/vim/undo//



autocmd BufWritePre * call ClearWhite()
autocmd BufEnter,BufReadPost,FileReadPost,BufNewFile,DirChanged *
	\ call system("test -z \"$NORENAMEVIM\" && truncate_left=1 set-title " .
	\ expand("%"))

" Grrr.  I occasionally get ft set to things that change my formatoptions
" eg, if vim sets ft=conf, it add 'r' and 'o'.  Get rid of them!
autocmd BufEnter * set formatoptions-=ro
autocmd BufEnter * set indentexpr=
autocmd BufNewFile postmortem-*.md 0r ~/3rd-party/postmortem-templates/templates/postmortem-template-srebook.md

" See :help fold-foldtext for details
set foldtext=MyFoldText()
function! MyFoldText()
    let prefix = printf("%3d: ", v:foldend - v:foldstart + 1)
    for i in range(v:foldstart, v:foldend)
	let line = getline(i)
	if match(line, '^[ %#/\{}*-]*$') == -1
	    return prefix . line
	endif
    endfor
    return prefix . "Trivial fold"
endfunction

runtime local/all.vim

" vim: fen:sw=4 fdm=indent fdl=1
