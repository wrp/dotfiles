#!/bin/bash

# Display git branches and prompt for one to checkout.

# When given a non-integer first argument, filter the branches that match it as a regex.
# When given an integer, select it.

: ${COLUMNS:=$( tput cols 2> /dev/null )}
width=$(git for-each-ref --format='%(refname:short)' refs/heads \
	| awk 'length > max {max = length} END {print max + 2}')
format="%(align:$width)%(HEAD) %(refname:short)%(end)"
list=$(git branch --color --format="$format")
choice=${1}
die() { test -n "$*" && echo "$*" >&2; exit 1; }

if test "$choice" = -; then git checkout @{-1}; exit; fi

trim() {
	# filter list based on $choice
	local match
	if test "$choice" -gt 0 2> /dev/null; then
		match="\$. == ${choice}"
	else
		match="m/${choice-.}/"
	fi
	echo "$list" | perl -nE "chop; say substr(\$_,0,${cols:-${COLUMNS-80}}) if $match"
}
while
	list=$(trim)
	count=$(echo "$list" | wc -l | tr -d '[:space:]')
	test "$count" -gt 1 2> /dev/null
do
	echo "$list" | nl -ba -s ') ' | column -c "$COLUMNS"
	printf "Select branch: "
	read -r choice || echo
	test -z "$choice" && exit 0
done

branch=$( echo "$list" | cut -b 3- | awk '{print $1}' )

if test -n "$branch"; then
	# Check if the current working directory exists in the new branch
	if ! git show "$branch":./ > /dev/null 2>&1; then
		die Current working dir does not exist in target branch
	fi
	git checkout "$branch"
else
	exit 1
fi
