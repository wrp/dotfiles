#!/bin/bash

# Search for commands in .bash-history and provide an interface
# to store one in a tmux buffer

die() { test -n "*" && echo "$@"; exit 1; }

set_global_vars() {
	DIR=$HOME/.config/$USER
	mkdir -p "$DIR"
	HIST=$DIR/bash-search-history-args
	RESULTS=$DIR/bash-search-history-results
	tac=$(which tac || which gtac)
	test -n "$tac" || die 'No valid tac in path'
	buffer_name=history_search
	: ${max_lines=15}
}

do_search() {
	# Search ~/.bash-history for matching commands, strip duplicates
	# put results in $RESULTS
	trap 'rm -f $tmp1 $tmp2' RETURN
	tmp1=$(mktemp)
	tmp2=$(mktemp)

	# Format the timestamp and commands one per line
	# Prepend "?" to every command with unknown status
	# This relies on the formatting given in the PROMPT_COMMAND in .bashrc
	< ~/.bash-history \
		awk '
			/^#/ {
				time = substr($1, 2)
				status = match($0,"FAILED$") ? "!" : match($0,"ok$") ? "" : "?"
			}
			!/^#/ && ( printfailed || status != "!") {
				printf "%s %2s| %s\n", time, status, $0
			}
		' status='?' printfailed=${V+1} \
	> $tmp1

	# Find length of timestamp and status in above output
	prelen=$(awk '{print match($0, "\\|"); exit}' $tmp1)
	for pattern; do
		unset not
		if test "${pattern:0:1}" = '~'; then
			not='!'
			pattern="${pattern:1}"
		fi
		awk "$not match(tolower(substr(\$0, ${prelen-14})),
			tolower(\"$pattern\"))" $tmp1 > $tmp2
		mv $tmp2 $tmp1
	done

	# Unique the entries and ignore 's' command.
	< $tmp1 "$tac" \
	| awk '!/^s / && !a[$2]++' FS=\| \
	> $tmp2
	mv $tmp2 $tmp1
	test -s $tmp1 || return 1
	cat $tmp1 > "$RESULTS"
}

get_previous_selection() {
	if test "$1" -ge 0 2> /dev/null; then
		choice=$1
		shift
	fi

	if test $# = 0; then
		test -s "$RESULTS" || die No previous results saved
	else
		echo "$*" > "$HIST".tmp
		test -r "$HIST" && sed -e "\@^$*\$@d" "$HIST" >> "$HIST".tmp
		mv "$HIST".tmp "$HIST"
		do_search "$@"
	fi
}

check_tmux() {
	if test -z "$TMUX"; then
		printf "Not running tmux.  Aborting\n" >&2
		exit 1
	fi
}

get_current_selection() {
	if test -z "$choice"; then
		if test "$status" != 0; then
			if test -z "$V"; then
				V=1 exec "$0" "$@"
			fi
			printf "No results found for search terms: %s\n" "$*">&2
			exit 1
		fi
		if test "$(wc -l < "$RESULTS")" = 1; then
			n=1
		else
			< "$RESULTS" \
			sed "${max_lines}q" \
			| nl -s ') ' -w 2 -ba | expand | "$tac" \
			| perl -nE '
				s/([0-9]{9,10})/sprintf "%s", scalar localtime $1/e;
				chop; say substr $_, 0, '"${COLUMNS-80} - 1"
			echo ' 0) Exit'

			check_tmux
			printf 'Select command to store in tmux buffer: '
			read n
		fi
	else
		n=$choice
	fi
}

main() {
	set_global_vars
	get_previous_selection "$@"
	status=$?
	get_current_selection "$@"

	check_tmux

	if test "$n" -eq 0 2> /dev/null; then
		exit 0
	elif test "$n" -gt 0 2> /dev/null; then
		< "$RESULTS" sed -n -e "${n}s/[^|]*| //" -e "$n"p \
		| tr -d \\n | tmux loadb -b ${buffer_name?} -
	elif test -n "$n"; then  # This is a hack to catch user error (eg, typing a command instead of making a selection)
		printf "%s" "$n" | tmux loadb -b ${buffer_name?} -
	else
		echo
		exit 0
	fi
}

main "$@"

# Let interactive prompt print
{ sleep .3; tmux paste-buffer -b ${buffer_name?} ; } &
