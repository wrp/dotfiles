#!/bin/bash

# Search for commands in .bash-history and provide an interface
# to store one in a tmux buffer

die() { test -n "*" && echo "$@"; exit 1; }

HIST=$HOME/.config/$USER/bash-search-history-args
RESULTS=$HOME/.config/$USER/bash-search-history-results
tac=$(which tac || which gtac)
buffer_name=history_search
: ${max_lines=15}

if test "$1" -ge 0 2> /dev/null; then
	choice=$1
	shift
fi


do_search() {
	# Prepend "?:" to every command with unknown status
	# This relies on the formatting given in the PROMPT_COMMAND in .bashrc

	trap 'rm -f $tmp1 $tmp2' RETURN
	tmp1=$(mktemp)
	tmp2=$(mktemp)

	< ~/.bash-history \
		awk '
			/^#/ {
				time = substr($1, 2, 100)
				status = match($0,"FAILED$") ? "!" : match($0,"ok$") ? "" : "?"
			}
			!/^#/ && ( printfailed || status != "!") {
				printf "%s %2s| %s\n", time, status, $0
			}
		' status='?' printfailed=${V+1} \
	> $tmp1

	for pattern; do
		unset negate
		if test "${pattern:0:1}" = '~'; then
			negate=-v
			pattern="${pattern:1}"
		fi
		grep -E -i ${negate} "${pattern}" $tmp1 > $tmp2
		mv $tmp2 $tmp1
	done

	# Unique the entries and ignore 's' command.
	< $tmp1 $tac \
	| awk '!/^s / && !a[$0]++' \
	> $tmp2
	mv $tmp2 $tmp1
	test -s $tmp1 || exit 0
	cat $tmp1 > $RESULTS
}

if test $# = 0; then
	test -s $RESULTS || die No previous results saved
else
	echo "$*" > $HIST.tmp
	test -r $HIST && sed -e "\@^$*\$@d" $HIST >> $HIST.tmp
	mv $HIST.tmp $HIST
	do_search "$@"
fi


if test -z "$choice"; then
	< $RESULTS \
	sed "${max_lines}q" \
	| nl -s ')' -w 2 -ba | expand | $tac \
	| perl -nE '
		s/([0-9]{9,10})/sprintf "%s", scalar localtime $1/ge;
		chop; say substr $_, 0, '"${COLUMNS-80} - 1"

	printf 'Select command to store in tmux buffer: '
	read n
else
	n=$choice
fi

if test "$n" -gt 0 2> /dev/null; then
	< $RESULTS sed -n -e "${n}s/.*| //" -e "$n"p \
	| tr -d \\n | tmux loadb -b ${buffer_name?} -
elif test -n "$n"; then
	printf "%s" "$n" | tmux loadb -b ${buffer_name?} -
else
	echo
	exit 0
fi

# Let interactive prompt print
{ sleep .2; tmux paste-buffer -b ${buffer_name?} ; } &
