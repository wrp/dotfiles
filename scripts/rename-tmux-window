#!/bin/sh

# Set the title of the tmux or terminal window

# The expectation is that we're running in TMUX or docker.  For the moment,
# we can use terminal escape sequences from docker images I often
# run.  Cannot use escape sequences from Apple terminal directly,
# but I don't really care about that.  Abort early and call it a success
# if we aren't in one of the expected environments.
test -z "$TMUX$DOCKER" && exit

# If no argument is given, default to the basename of the git dir.
# In a worktree, use the basename of the branch.  If not in a git repo,
# use the output of pwd -P
test -z "$*" && {
	git_dir=$(realpath $(git rev-parse --git-dir))
	if test "${git_dir##*/}" = .git; then
		set -- "$(basename "$(dirname "$git_dir")")"
	elif work_dir=$(git rev-parse --show-toplevel); then
		set -- "$(basename "$work_dir")"
		if test "$1" = worktrees; then
			# Grrr.  After a git worktree move, the absolute-git-dir
			# retains its old name.  So let's use the currently
			# checked out branch
			set -- "$(basename $(git rev-parse --abbrev-ref HEAD))"
		fi
	else
		set -- "$(basename "$(pwd -P | sed -e "s@$HOME@~@")")"
	fi
} 2> /dev/null

if test -n "$truncate_left"; then
	patt='.*\(.\{19\}\)'
	repl='<\1'
else
	patt='\(.\{19\}\).*'
	repl='\1>'
fi

title="${DOCKER+$DOCKER:}${VIRTUAL_ENV+!}$( echo "$*" | sed '/.\{20\}/s/^'$patt'$/'$repl/)"


# This is now a poorly named script.  Instead of renaming the window,
# we will change the title of the current pane and rely on the
# tmux configuration to set the string shown in the status bar via
# the automatic-rename-format
if test -n "$TMUX"; then
	if test -n "$FORCE"; then
		echo 'WARNING: window renamed.  Auto-rename is now disabled' >&2
		tmux rename-window -- "$title"
	else
		tmux select-pane -T "$title"
	fi
else
	printf '\033k%s\033\' "$title"
fi
