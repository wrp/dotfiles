#!/bin/bash

# Select the desired vim setting, based on various metadata from git, etc.
# This is expected to be invoked from .vimrc, with the desired setting
# as first argument, full path as second, and vim's deduced filetype
# as (optional) third.  eg: "$0 tabstop /path/to/a.cpp cpp"

# At the moment, we are just comparing the values in the local
# environment variable REMOTE_VIM_SETTINGS.  If a remote in the
# repo exists that matches, we will use the values from the first
# one that matches.

# It is considered an error if no value can be determined, in which
# case output nothing and return 1.

die() { printf "%s${1:+\n}" "$*"; exit 1; } >&2
result() { printf '%s\n' $1; exit 0; }
git() {
    command git -C "${dirname:?}" "$@"
}
get_remote_url() {
	remote=$(git config branch.${current_branch?}.remote)
	git config remote.$remote.url
}
get_value() {
	test -n "$*" || return 1

	# $* is expected to look like "{filetype} {tabstop} [no]expandtab [keep_trailing_whitespace]"
	read filetype tabstop expandtab keep_white <<< "$*"

	if ! test "$tabstop" -gt 0 2> /dev/null; then
		echo "Invalid tabstop in REMOTE_VIM_SETTINGS" >&2
		return 1
	fi

	case $expandtab in
	expandtab|noexpandtab) : ;;
	*)
		echo "Invalid expandtab value in REMOTE_VIM_SETTINGS" >&2
		return 1;
	esac

	if test -n "$keep_white" && test "$keep_white" != keep_trailing_whitespace; then
		echo "Invalid trailing whitespace column in REMOTE_VIM_SETTINGS" >&2
		return 1;
	fi

	if test -n "$keep_white"; then
		keep_white=1
	else
		keep_white=0
	fi
}
main(){
	dirname=$(dirname "$2")
	tab=$(printf '\t')
	declare -A remotes

	if test -z "$REMOTE_VIM_SETTINGS"; then
		die no remotes are set in REMOTE_VIM_SETTINGS
	fi

	while read key value; do test -n "$key" && remotes[$key]=$value; done <<< "$REMOTE_VIM_SETTINGS"
	while IFS=" ${tab}:@/" read _ _ git_url _ http_url _; do
		test -n "$git_url" && get_value ${remotes[$git_url]} && break
		test -n "$http_url" && get_value ${remotes[$http_url]} && break
	done < <(git remote -vv)

	shiftwidth=$tabstop
	if test -z "$3" || test "$3" = "$filetype"; then
		test -n "${!1}" && result "${!1}"
	fi
}

main "$@"
exit 1
