#!/bin/sh
#
# usage: @NAME@ [branch]
#
# Fetch from the remote associated with the specified branch
# (or diff.base-branch or main or master) and update the local ref.
# If the branch is already checked out, this is
# just git-pull --quiet followed by a summary of the update.

case "$1" in
--)
	shift;;
-h|-?|--help)
	sed -E -e 1d -e "/^#/!q; s/# ?//; s|@NAME@|$(basename $0)|" "$0"
	exit;;
esac


branch=${1-$(git base-branch)} || exit
current=$(git rev-parse --abbrev-ref HEAD)
old=$(git show-ref refs/heads/$branch | cut -b 1-40)

if test -z "$old"; then
	echo >&2 "Invalid branch: $branch.  Use 'git show-ref --heads' for options"
	exit 1
fi

if test "$current" = "$branch"; then
	git pull --quiet
else
	remote=$(git config branch.${branch}.remote)
	upstream=$(git rev-parse --abbrev-ref --symbolic-full-name ${branch}@{u})
	if test -z "$remote" || test -z "$upstream"; then
		echo "Can't find remote for $branch" >&2
		exit 1
	fi
	git fetch --quiet "$remote" || exit 1
	git update-ref refs/heads/$branch $upstream || exit 1
fi

new=$(git show-ref refs/heads/$branch | cut -b 1-40)
if test "${old}" = "${new}"; then
	echo No changes to "$branch ($new)"
else
	count="$(git rev-list "$old".."$new" | wc -l)"
	if ! test "$count" -eq 1; then s=s; fi
	printf "Updated $branch by %d commit$s\n" "$count"
	printf "  from: %s\n" "$(git log -n 1 --format='%H    %s' "$old")"
	printf "    to: %s\n" "$(git log -n 1 --format='%H    %s' "$new")"
	git diff --shortstat "$old" "$new"
fi
