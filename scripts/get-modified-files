#!/bin/sh
# Get a list of modified files.  First argument specifies a branch to
# compare to (defaulting to current) or an integer.  If it is an integer, it
# is the amount of git history to explore in the current branch.


if ! top=$(git rev-parse --path-format=relative --show-toplevel 2> /dev/null)
then
	echo "Not in a git repo: can't find modified files" >&2
	exit 1
fi

if test -z "$FULL_PATH"; then
	top=.
fi
: ${GIT_DIR=$(git rev-parse --path-format=relative --git-dir)}
filter=${f:-.}

if test $# = 0 || test "$1" -gt 0 2> /dev/null; then
	# First arg is an integer.
	for (( i = 0; i < ${1-1}; i++ )); do
		git diff-tree --no-commit-id --name-only -r HEAD~${i-0}
	done
else
	# Assume first arg is a commitish
	commit=${1-$(git rev-parse --abbrev-ref HEAD)} || exit

	if test -d "$GIT_DIR"/rebase-merge; then
		# rebase in progress.
		git diff --ignore-submodules --name-only --diff-filter=UM
	else
		git diff --ignore-submodules --name-only "${commit}" --
	fi

fi \
| awk '!a[$0]++ && match($0, f) {print c, $0}' OFS=/ f="$filter" c="$top" \
| python -c '
import sys
import os
for x in sys.stdin:
	print(os.path.relpath(x, os.getcwd()))
'
