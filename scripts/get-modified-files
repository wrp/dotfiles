#!/bin/sh
# Get a list of modified files.  First argument specifies a branch to
# compare to, defaulting to current.  If it is an integer, it is the
# amount of git history to explore.

# TODO: clean this up!!

test -n "$TOP" && cd $(git exec pwd)
arg_set=${1}
branch=${1-$(git rev-parse --abbrev-ref HEAD)} || exit
depth=${1-1}


# THis is a terrible hack.  If first arg is exactly 7 chars long, it will probably
# be interpreted as a hash.  Need to add some reasaonble logic here
case "${1}" in
[a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9])    # Show the files changed exactly in the rev listed in $2
	git diff-tree --no-commit-id --name-only -r "$1"
;;
*)
	test "$depth" -gt 0 2> /dev/null || depth=1

	if test "$branch" -gt 0 2> /dev/null || ! git diff --name-only "${branch}" -- | grep .; then
		if ! git diff-files --name-only | grep . || test -n "$arg_set"; then
			while test ${i-0} -lt $depth; do
				git diff-tree --no-commit-id --name-only -r HEAD~${i-0}
				: $(( i += 1 ))
			done
		fi
	fi
;;
esac \
| awk '!a[$0]++{print c, $0}' OFS=/ c=$(git exec pwd)
